@startuml

package to_gui {
    class free_functions {
     + add_input_outputs_to_function_with_gui(function_with_gui)
     (called by FunctionWithGui constructor)
     ---
     + register_type(type_, factory)
       (Stores a GUI factory for a type: the factory
       can be any descendant of AnyDataWithGui.
       Called by the user to register custom types)
     ---
     (factories are stored in a singleton
     of the class GuiFactories)
    }

    class PrimitiveWithGui{
        ---
        see primitive_gui.py
        ---
        aka
        + IntWithGui, FloatWithGui, StrWithGui
        ---
    }

    class CompositeWithGui{
        ---
        see composite_gui.py
        ---
        aka
        OptionalWithGui, ListWithGui, EnumWithGui, etc.
    }

    free_functions ...> CompositeWithGui: uses
}
note top of to_gui
    This package contains a registry of GUI factories,
    able to emit GUI widgets for many data type.

    Consequently, it can also add
    input/output widgets to a function.
end note

CompositeWithGui --|> fiat_core.AnyDataWithGui
PrimitiveWithGui --|> fiat_core.AnyDataWithGui

@enduml
